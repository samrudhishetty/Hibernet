package in.mindcraft.HQLDemo;

import java.util.List;
import java.util.Scanner;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

/*
 * write a menu driven program to perform Crud Operations on mobile phone objects using hibernate HQL
 */

public class Tester {

	public static void main1(String[] args) {
		
//		MobilePhone m1= new MobilePhone(101,"samsung",20000);
//		MobilePhone m2= new MobilePhone(102,"redmi",20050);
//		MobilePhone m3= new MobilePhone(103,"iphone",54000);
//		MobilePhone m4= new MobilePhone(104,"xoxo",25000);	
		Configuration con = new Configuration().configure();
		ServiceRegistry reg = new ServiceRegistryBuilder().applySettings(con.getProperties()).buildServiceRegistry();
		SessionFactory sf = con.buildSessionFactory(reg);
		Session session = sf.openSession();
		Transaction tx = session.beginTransaction();		
//		MobilePhone m = (MobilePhone)session.get(MobilePhone.class, 102); // to fetch particular id from table
//		System.out.println("Details of moblie "+m);	
//		Query query  = session.createQuery("from MobilePhone m  where m.cost >22000 ");
//		List<MobilePhone> mlist = query.list();
//		for(MobilePhone m:mlist)
//			System.out.println(m);		
//		Query q=session.createQuery("update MobilePhone m set make=:m where mid=:i");  
//		q.setParameter("m","google");  
//		q.setParameter("i",102);  
//		int update=q.executeUpdate();  
//		System.out.println(update);
		

		    private static SessionFactory sessionFactory;

		    public static void main(String[] args) {
		        sessionFactory = HibernateUtils.getSessionFactory();

		        Scanner scanner = new Scanner(System.in);
		        int choice;
		        do {
		            System.out.println("Menu:");
		            System.out.println("1. Create Mobile Phone");
		            System.out.println("2. Read Mobile Phone by ID");
		            System.out.println("3. Update Mobile Phone");
		            System.out.println("4. Delete Mobile Phone");
		            System.out.println("5. Exit");
		            System.out.print("Enter your choice: ");
		            choice = scanner.nextInt();

		            switch (choice) {
		                case 1:
		                    createMobilePhone(scanner);
		                    break;
		                case 2:
		                    readMobilePhone(scanner);
		                    break;
		                case 3:
		                    updateMobilePhone(scanner);
		                    break;
		                case 4:
		                    deleteMobilePhone(scanner);
		                    break;
		                case 5:
		                    System.out.println("Exiting program.");
		                    break;
		                default:
		                    System.out.println("Invalid choice.");
		            }
		        } while (choice != 5);

		        sessionFactory.close();
		        scanner.close();
		    }

		    private static void createMobilePhone(Scanner scanner) {
		        System.out.print("Enter mobile phone brand: ");
		        String brand = scanner.next();
		        System.out.print("Enter mobile phone model: ");
		        String model = scanner.next();

		        MobilePhone mobilePhone = new MobilePhone(brand, model);

		        try (Session session = sessionFactory.openSession()) {
		            session.beginTransaction();
		            session.save(mobilePhone);
		            session.getTransaction().commit();
		            System.out.println("Mobile Phone created with ID: " + mobilePhone.getId());
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }

		    // Implement readMobilePhone, updateMobilePhone, and deleteMobilePhone methods similarly.

		    // Helper class to set up Hibernate session factory
		    static class HibernateUtils {
		        private static final SessionFactory sessionFactory;

		        static {
		            try {
		                Configuration config = new Configuration().configure();
		                sessionFactory = config.buildSessionFactory();
		            } catch (Throwable ex) {
		                throw new ExceptionInInitializerError(ex);
		            }
		        }

		        public static SessionFactory getSessionFactory() {
		            return sessionFactory;
		        }
		    }
		}

         
		
		tx.commit();
	}

}
